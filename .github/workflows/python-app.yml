# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

permissions:
  contents: read

jobs:
  env:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11.10]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python VENV
      run: |
        python -m venv .venv
        source .venv/bin/activate
    - name: Cache
      uses: actions/cache@v4.1.2
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: .venv
        # An explicit key for restoring and saving the cache
        key: ${{ matrix.os }}-python-${{ hashFiles('**/requirements.txt') }}
        # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
        restore-keys: ${{ matrix.os }}-python-${{ matrix.python-version }} # optional
        # The chunk size used to split up large files during upload, in bytes
        upload-chunk-size: # optional
        # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
        enableCrossOsArchive: false
        # Fail the workflow if cache entry is not found
        fail-on-cache-miss: # optional, default is false
        # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
        lookup-only: # optional, default is false
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  test:
    needs: env
    runs-on: ubuntu-latest
    steps:
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,build,dist
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.venv,build,dist
    - name: Install xvfb
      run: sudo apt-get install -y xvfb libxcb-xinerama0
    - name: Run tests and capture core dumps
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    - name: Upload core dumps
      if: always()
      uses: actions/upload-artifact@v4.4.3
      with:
        name: core-dumps
        path: /tmp/core.*
        retention-days: 1
    - name: Test with pytest (isolated) & xvfb
      run: |
        xvfb-run -a pytest --isolate -v
  build:
    name: Generate Build Artifacts
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11.10]
    runs-on: ${{ matrix.os }}*
    if: ${{ github.event_name == 'push' }}
    steps:
    - name: PyInstaller Action
      uses: Martin005/pyinstaller-action@v1.2.0
      inputs: 
        spec: main.py
        requirements: requirements.txt
        options: --onedir,--windowed,--icon ./resources/uextrader_icon_resized_idL_icon.ico,--add-data ./resources/*:resources/*
        python_ver: ${{ matrix.python-version }}
    - name: Upload Compiled Executables
      uses: actions/upload-artifact@v4.4.3
      with:
        name: builds-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/
        if-no-files-found: error